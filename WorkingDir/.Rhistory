U[sort(order(D)[U,])]
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
i = 1;
U[sort(order(D)[U,])]
U[sort(order(D)[U])]
order(D)
order(D, decreasing= T)
lambdaOrder = order(D, decreasing= T)
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
i = 1;
lambdaOrder = order(D, decreasing= T)
U[,lambdaOrder]
View(U)
funcPCA = function(M){
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
#sort the eigenvector by their eigenvalues and chooses enough to have k% of information
lambdaOrder = order(D, decreasing= T)
D = d[lambdaOrder]
U = U[,lambdaOrder]
eigen.vectors = U
eigen.values = D
return eigen
}
funcPCA = function(M){
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
#sort the eigenvector by their eigenvalues and chooses enough to have k% of information
lambdaOrder = order(D, decreasing= T)
D = d[lambdaOrder]
U = U[,lambdaOrder]
eigen.vectors = U
eigen.values = D
return(eigen)
}
?princomp
#####PCA Análise Fatorial
#Q1
iris
dim(iris)
names(iris)
plot(iris[,3], iris[,4])
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)])
setosa <- iris[iris$Species == "setosa", 1:4]
plot(setosa)
mean(setosa)
cov(setosa)
cor(setosa)
plot(iris[,3], iris[,4])
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)])
setosa <- iris[iris$Species == "setosa", 1:4]
plot(setosa)
mean(setosa)
cov(setosa)
cor(setosa)
cov(iris)
S = matrix(2,2,c(0.124,.0992,.0992,.143))
View(S)
S = matrix(nrow=2,ncol=2,c(0.124,.0992,.0992,.143))
View(S)
u = mean(setosa.Sepal.Length)
u = mean(setosa$Sepal.Length)
u = c(mean(setosa$Sepal.Length), mean(setosa$Sepal.Width))
?normal
??normal
??normal
??normal multi
??"normal multi"
??"normal multivariate"
??"multivariate normal"
dmvnorm(x,mean,sigma)
dmvnorm(x, u, S)
library(mvtnorm)
install.packages("mvtnorm")
mean(setosa)
iris
dim(iris)
names(iris)
plot(iris[,3], iris[,4])
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)])
setosa <- iris[iris$Species == "setosa", 1:4]
plot(setosa)
mean(setosa)
cov(setosa)#'S' covariancia
cor(setosa)
#Sepal Length e Sepal Width são os grupos mais correlacionados
#dist do subvetor (X1,X2)
S = matrix(nrow=2,ncol=2,c(0.124,.0992,.0992,.143))
u = c(mean(setosa$Sepal.Length), mean(setosa$Sepal.Width))
library(mvtnorm)
dmvnorm(x, u, S)
mean(setosa)
setosa.mean = c(mean(setosa$Sepal.Length),mean(setosa$Sepal.Width),mean(setosa$Petal.Length),mean(setosa$Petal.Width))
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
x = c(100,1100,2100,3100,4100,5100,6100,7100,8100,9100)
setwd("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir")
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|/100")
lines(x, yFib1, col='blue',type='b')
x = c(100,200, 300,400,500,600,7000,800,900)
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|/100")
source('~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/Grafos.R', echo=TRUE)
x = c(100,200, 300,400,500,600,700,800,900)
x = c(100,200, 300,400,500,600,700,800,900)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|/100")
lines(x, yFib1, col='blue',type='b')
lines(x, yVec1,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*x),type='p', col='purple')
lines(x, (x*(log(x)/log(2))),type='p', col='brown')
x = c(100,200, 300,400,500,600,700,800,900)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|/100")
lines(x, yFib1, col='blue',type='b')
lines(x, yVec1,col='green', type='b')
lines(x, (x*(log(x)/log(2))),type='p', col='brown')
lines(x, (x*x),type='p', col='purple')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
x*(log(x)/log(2))
x*x
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|/100")
lines(x, yFib1, col='blue',type='b')
lines(x, yVec1,col='green', type='b')
lines(x, (x*(log(x)/log(2))),type='p', col='brown')
lines(x, (x*x),type='p', col='purple')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|/100")
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
lines(x, yFib1, col='blue',type='b')
lines(x, yVec1,col='green', type='b')
lines(x, (x*(log(x)/log(2))),type='p', col='brown')
lines(x, (x*x),type='p', col='purple')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
x = c(100,200, 300,400,500,600,700,800,900)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1/1000
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1/1000
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1/1000
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
lines(x, yFib1, col='blue',type='b')
lines(x, yVec1,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1/1000
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1/1000
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1/1000
plot(x, yBin1, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
lines(x, yFib1, col='blue',type='b')
lines(x, yVec1,col='green', type='b')
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1/1000
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1/1000
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1/1000
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1/1000
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1/1000
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1/1000
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1/1000
?plot
?lines
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue',type='b')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green', type='b')
#lines(x, (x*(log(x)/log(2))),type='p', col='brown')
#lines(x, (x*x),type='p', col='purple')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
x = c(100,200, 300,400,500,600,700,800,900)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
?plot
?lines
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue',type='b')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green', type='b')
#lines(x, (x*(log(x)/log(2))),type='p', col='brown')
#lines(x, (x*x),type='p', col='purple')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
?plot
?seq
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|", xlim=x,ylim=seq(from=100, to= 1000000, by((to-from)/(1000))))
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|", xlim=x,ylim=seq(from=100, to= 1000000, length.out = 1000)
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|", xlim=x,ylim=seq(from=100, to= 1000000, length.out = 1000)
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|", xlim=x,ylim=seq(from=100, to= 1000000, length.out = 1000))
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|", xlim=x,ylim=seq(from=100, to= 1000000, length.out = 1000))
?plot
plot.window(xlim=x,ylim=seq(from=100, to= 1000000, length.out = 1000))
plot.window(xlim=c(100,10000),ylim=c(100,100000))
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue',type='b')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green', type='b')
plot.window(xlim=c(100,10000),ylim=c(100,100000))
?plot
p = plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
plot.window(xlim=c(100,10000),ylim=c(100,100000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
plot.window(xlim=c(100,10000),ylim=c(100,100000))
plot(x, yBin, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
plot.window(xlim=c(100,10000),ylim=c(100,100000))
yRange = seq(from=100,to=100000,length.out = 1000)
plot.window(xlim=c(100,10000),ylim=c(100,100000))
plot(x, yRange, t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
x = seq(100,10000,length.out = 100)
x = seq(100,10000,length.out = 100)
yRange = seq(from=100,to=100000,length.out = 1000)
plot(t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
plot.window(xlim=c(100,10000),ylim=c(100,100000))
plot(t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
plot(xm yBin,t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
yBin = (yBin1 + yBin2 + yBin3)/3
yFib = (yFib1 + yFib2 + yFib3)/3
yVec = (yVec1 + yVec2 + yVec3)/3
plot(x, yBin,t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
x = seq(100,1000,length.out = 100)
x = seq(100,1000,by = 100)
x = seq(100,900,by = 100)
plot.window(xlim=c(100,10000),ylim=c(100,100000))
plot(x, yBin,t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|")
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
plot(x, yBin,t='b', col='red', main="comparison on sparse graph", ylab="time(ms)",xlab="|V|", xlim=c(100,10000),ylim=c(100,100000))
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,10000),ylim=c(100,100000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
xlim=c(100,1000),ylim=c(100,10000))
yBin = (yBin1 + yBin2 + yBin3)/3
yFib = (yFib1 + yFib2 + yFib3)/3
yVec = (yVec1 + yVec2 + yVec3)/3
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
lines(x, (x*(log(x)/log(2))),type='p', col='brown')
lines(x, (x*x),type='p', col='purple')
lines(x, (x*x),type='p', col='gold')
lines(x, (x*(log(x)/log(2)))/100,type='p', col='brown')
lines(x, (x*x)/100,type='p', col='gold')
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*(log(x)/log(2)))/100,type='p', col='brown')
lines(x, (x*x)/100,type='p', col='gold')
lines(x, (x*x)/100,type='p', col='purple')
yBin1 = read.csv("dense/1/timeLogBin.csv", sep=" ", header=F)$V1/1000
yBin2 = read.csv("dense/2/timeLogBin.csv", sep=" ", header=F)$V1/1000
yBin3 = read.csv("dense/3/timeLogBin.csv", sep=" ", header=F)$V1/1000
yFib1 = read.csv("dense/1/timeLogFib.csv", sep=" ", header=F)$V1/1000
yFib2 = read.csv("dense/2/timeLogFib.csv", sep=" ", header=F)$V1/1000
yFib3 = read.csv("dense/3/timeLogFib.csv", sep=" ", header=F)$V1/1000
yVec1 = read.csv("dense/1/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec2 = read.csv("dense/2/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec3 = read.csv("dense/3/timeLogVec.csv", sep=" ", header=F)$V1/1000
yBin = (yBin1 + yBin2 + yBin3)/3
yFib = (yFib1 + yFib2 + yFib3)/3
yVec = (yVec1 + yVec2 + yVec3)/3
plot(x, yBin,t='b', col='red', main="comparison on dense graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin1 = read.csv("complete/1/timeLogBin.csv", sep=" ", header=F)$V1/1000
yBin2 = read.csv("complete/2/timeLogBin.csv", sep=" ", header=F)$V1/1000
yBin3 = read.csv("complete/3/timeLogBin.csv", sep=" ", header=F)$V1/1000
yFib1 = read.csv("complete/1/timeLogFib.csv", sep=" ", header=F)$V1/1000
yFib2 = read.csv("complete/2/timeLogFib.csv", sep=" ", header=F)$V1/1000
yFib3 = read.csv("complete/3/timeLogFib.csv", sep=" ", header=F)$V1/1000
yVec1 = read.csv("complete/1/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec2 = read.csv("complete/2/timeLogVec.csv", sep=" ", header=F)$V1/1000
yVec3 = read.csv("complete/3/timeLogVec.csv", sep=" ", header=F)$V1/1000
yBin = (yBin1 + yBin2 + yBin3)/3
yFib = (yFib1 + yFib2 + yFib3)/3
yVec = (yVec1 + yVec2 + yVec3)/3
plot(x, yBin,t='b', col='red', main="comparison on complete graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
x = seq(500,10000,by = 500)
x = seq(500,10000,by = 500)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
?plot
?lines
yBin = (yBin1 + yBin2 + yBin3)/3
yFib = (yFib1 + yFib2 + yFib3)/3
yVec = (yVec1 + yVec2 + yVec3)/3
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
timeLogVec <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/sparse/timeLogVec.csv", quote="\"", comment.char="")
View(timeLogVec)
View(timeLogVec)
yVec= timeLogVec$V1
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yVec,col='green', type='b')
x = seq(500,10000,by = 500)
x
x = seq(500,9500,by = 500)
x = seq(500,9500,by = 1000)
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
yVec= timeLogVec$V1
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yVec,col='green', type='b')
timeLogBin <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/sparse/timeLogBin.csv", quote="\"", comment.char="")
View(timeLogBin)
timeLogFib <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/sparse/timeLogFib.csv", quote="\"", comment.char="")
View(timeLogFib)
yVec= timeLogVec$V1
yBin= timeLogBin$V1
yfib= timeLogFib$V1
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(100,1000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
timeLogBin <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/sparse/timeLogBin.csv", quote="\"", comment.char="")
View(timeLogBin)
timeLogFib <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/sparse/timeLogFib.csv", quote="\"", comment.char="")
View(timeLogFib)
timeLogVec <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/WorkingDir/sparse/timeLogVec.csv", quote="\"", comment.char="")
View(timeLogVec)
yVec= timeLogVec$V1
yBin= timeLogBin$V1
yfib= timeLogFib$V1
x = seq(500,9500,by = 1000)
yVec= timeLogVec$V1
yBin= timeLogBin$V1
yfib= timeLogFib$V1
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
yFib= timeLogFib$V1
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,10000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*(log(x)/log(2)))/100,type='p', col='brown')
lines(x, (x*x)/100,type='p', col='purple')
yVec= timeLogVec$V1
yBin= timeLogBin$V1
yFib= timeLogFib$V1
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,5000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,3000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*(log(x)/log(2)))/100,type='p', col='brown')
lines(x, (x*x)/100,type='p', col='purple')
lines(x, (x*x)/100,type='p', col='gold')
lines(x, (x*x)/1000,type='p', col='gold')
lines(x, (x*x)/1000,type='p', col='dark gold')
lines(x, (x*x)/1000,type='p', col='dark blue')
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,3000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*(log(x)/log(2)))/100,type='p', col='brown')
lines(x, (x*x)/1000,type='p', col='dark blue')
lines(x, (x*x)/10000,type='p', col='dark blue')
lines(x, (x*x)/100000,type='p', col='dark blue')
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,3000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*(log(x)/log(2)))/100,type='p', col='brown')
lines(x, (x*x)/100000,type='p', col='dark blue')
lines(x, (x*(log(x)/log(2)))/1000,type='p', col='brown')
plot(x, yBin,t='b', col='red', main="comparison on sparse graph",
ylab="time(ms)",xlab="|V|",
xlim=c(500,10000),ylim=c(100,3000))
lines(x, yFib, col='blue',type='b')
lines(x, yVec,col='green', type='b')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
lines(x, (x*(log(x)/log(2)))/1000,type='p', col='brown')
lines(x, (x*x)/100000,type='p', col='dark blue')
