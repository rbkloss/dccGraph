L = t(chol(Sigma))
z = rnorm(3, mean=0, sd=1)
x = mi + L %*% z
n = 2000
sampleCount = 0
amostra = matrix(0, nrow=n, ncol=3)
while(sampleCount < n){
z = rnorm(3)
x = mi + L %*% z
sampleCount = sampleCount + 1
amostra[sampleCount,] = z;
}
mean(amostra)
mean(amostra[,1])
mean(amostra[,2])
mean(amostra[,3])
View(amostra)
miP = c(mean(amostra[,1]),mean(amostra[,2]),mean(amostra[,3]))
Sigma = matrix(nrow=3,ncol=3,c(4,9,-14,9,30,-44,-14,-44,94))
mi = c(10,20,-50)
L = t(chol(Sigma))
z = rnorm(3, mean=0, sd=1)
x = mi + L %*% z
n = 2000
sampleCount = 0
amostra = matrix(0, nrow=n, ncol=3)
while(sampleCount < n){
z = rnorm(3)
x = mi + L %*% z
sampleCount = sampleCount + 1
amostra[sampleCount,] = z;
}
miP = c(mean(amostra[,1]),mean(amostra[,2]),mean(amostra[,3]))
clear
cls
Sigma = matrix(nrow=3,ncol=3,c(4,9,-14,9,30,-44,-14,-44,94))
mi = c(10,20,-50)
L = t(chol(Sigma))
z = rnorm(3, mean=0, sd=1)
x = mi + L %*% z
n = 2000
sampleCount = 0
amostra = matrix(0, nrow=n, ncol=3)
while(sampleCount < n){
z = rnorm(3)
x = mi + L %*% z
sampleCount = sampleCount + 1
amostra[sampleCount,] = z;
}
miP = c(mean(amostra[,1]),mean(amostra[,2]),mean(amostra[,3]))
View(amostra)
n = 2000
sampleCount = 0
amostra = matrix(0, nrow=n, ncol=3)
while(sampleCount < n){
z = rnorm(3)
x = mi + L %*% z
sampleCount = sampleCount + 1
amostra[sampleCount,] = x;
}
Sigma = matrix(nrow=3,ncol=3,c(4,9,-14,9,30,-44,-14,-44,94))
mi = c(10,20,-50)
L = t(chol(Sigma))
z = rnorm(3, mean=0, sd=1)
x = mi + L %*% z
n = 2000
sampleCount = 0
amostra = matrix(0, nrow=n, ncol=3)
while(sampleCount < n){
z = rnorm(3)
x = mi + L %*% z
sampleCount = sampleCount + 1
amostra[sampleCount,] = x;
}
miP = c(mean(amostra[,1]),mean(amostra[,2]),mean(amostra[,3]))
SigmaP = mat(0,nrow=3,ncol=3)
SigmaP = matrix(0,nrow=3,ncol=3)
SigmaP = matrix(0,nrow=3,ncol=3)
i=j=1
while(i <= 3){
while(j<=3){
SigmaP[i,j] = mean((amostra[,i] - miP[i])*(amostra[,j] - miP[j]))
}
}
SigmaP = matrix(0,nrow=3,ncol=3)
i=j=1
while(i <= 3){
while(j <= 3){
SigmaP[i,j] = mean((amostra[,i] - miP[i])*(amostra[,j] - miP[j]))
j = j + 1
}
i = i + 1
}
View(SigmaP)
View(Sigma)
SigmaP = matrix(0,nrow=3,ncol=3)
i=j=1
while(i <= 3){
j=1
while(j <= 3){
SigmaP[i,j] = mean((amostra[,i] - miP[i])*(amostra[,j] - miP[j]))
j = j + 1
}
i = i + 1
}
View(SigmaP)
vecSD = c(Sigma[1,1],Sigma[2,2]Sigma[3,3])
vecSD = c(Sigma[1,1],Sigma[2,2],Sigma[3,3])
vecSD = sqrt(vecSD)
ro = matrix(0, nrow= 3, ncol = 3)
vecSD = c(Sigma[1,1],Sigma[2,2],Sigma[3,3])
i = 1
while(i <= 3){
j=1
while(j<=3){
ro[i,j] = Sigma[i,j] / (sqrt(vecSD[i]*vecSD[j]))
j = j+ 1
}
i = i + 1
}
View(ro)
R = matrix(0, nrow= 3, ncol = 3)
vecSD = c(S[1,1],S[2,2],S[3,3])
i = 1
while(i <= 3){
j=1
while(j<=3){
R[i,j] = S[i,j] / (sqrt(vecSD[i]*vecSD[j]))
j = j+ 1
}
i = i + 1
}
Sigma = matrix(nrow=3,ncol=3,c(4,9,-14,9,30,-44,-14,-44,94))
mi = c(10,20,-50)
L = t(chol(Sigma))
z = rnorm(3, mean=0, sd=1)
x = mi + L %*% z
n = 2000
sampleCount = 0
amostra = matrix(0, nrow=n, ncol=3)
while(sampleCount < n){
z = rnorm(3)
x = mi + L %*% z
sampleCount = sampleCount + 1
amostra[sampleCount,] = x;
}
u = c(mean(amostra[,1]),mean(amostra[,2]),mean(amostra[,3]))
S = matrix(0,nrow=3,ncol=3)
i=j=1
while(i <= 3){
j=1
while(j <= 3){
S[i,j] = mean((amostra[,i] - u[i])*(amostra[,j] - u[j]))
j = j + 1
}
i = i + 1
}
ro = matrix(0, nrow= 3, ncol = 3)
vecSD = c(Sigma[1,1],Sigma[2,2],Sigma[3,3])
i = 1
while(i <= 3){
j=1
while(j<=3){
ro[i,j] = Sigma[i,j] / (sqrt(vecSD[i]*vecSD[j]))
j = j+ 1
}
i = i + 1
}
R = matrix(0, nrow= 3, ncol = 3)
vecSD = c(S[1,1],S[2,2],S[3,3])
i = 1
while(i <= 3){
j=1
while(j<=3){
R[i,j] = S[i,j] / (sqrt(vecSD[i]*vecSD[j]))
j = j+ 1
}
i = i + 1
}
View(R)
View(ro)
?cholesky
??cholesky
?cholesky
?svd
?sort
M= matrix(c(1,2,3,4,5,6),nrow=2,ncol=3)
L = chol(M)
M= matrix(c(1,2,3,4,5,6,7,8,9),nrow=2,ncol=3)
L = chol(M)
M= matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
L = chol(M)
M= matrix(c(2,-1,0,-1,2,-1,0,-1,2),nrow=3,ncol=3)
L = chol(M)
L%*%t(L) == M
L%*%t(L)
View(L)
View(M)
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
L%*%t(L)
View(M)
View(L)
t(L)%*%L
?cholesky
?chol
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- diag(temp$d)
U <- temp$u
sortedLambda <- sort(D, decreasing=T)
View(D)
?diag
?PCA
??PCA
instal.('FactoMiningR')
instal('FactoMiningR')
.instal('FactoMiningR')
.instal('FactoMineR')
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
?sort
?order
U[sort(order(D)[U,])]
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
i = 1;
U[sort(order(D)[U,])]
U[sort(order(D)[U])]
order(D)
order(D, decreasing= T)
lambdaOrder = order(D, decreasing= T)
M= matrix(c(4,12,-16,12,37,-43,-16,-43,98),nrow=3,ncol=3)
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
i = 1;
lambdaOrder = order(D, decreasing= T)
U[,lambdaOrder]
View(U)
funcPCA = function(M){
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
#sort the eigenvector by their eigenvalues and chooses enough to have k% of information
lambdaOrder = order(D, decreasing= T)
D = d[lambdaOrder]
U = U[,lambdaOrder]
eigen.vectors = U
eigen.values = D
return eigen
}
funcPCA = function(M){
L = chol(M)
t(L)%*%L
temp <- svd(t(L))
D <- temp$d
U <- temp$u
len = length(D)
#sort the eigenvector by their eigenvalues and chooses enough to have k% of information
lambdaOrder = order(D, decreasing= T)
D = d[lambdaOrder]
U = U[,lambdaOrder]
eigen.vectors = U
eigen.values = D
return(eigen)
}
?princomp
#####PCA Análise Fatorial
#Q1
iris
dim(iris)
names(iris)
plot(iris[,3], iris[,4])
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)])
setosa <- iris[iris$Species == "setosa", 1:4]
plot(setosa)
mean(setosa)
cov(setosa)
cor(setosa)
plot(iris[,3], iris[,4])
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)])
setosa <- iris[iris$Species == "setosa", 1:4]
plot(setosa)
mean(setosa)
cov(setosa)
cor(setosa)
cov(iris)
S = matrix(2,2,c(0.124,.0992,.0992,.143))
View(S)
S = matrix(nrow=2,ncol=2,c(0.124,.0992,.0992,.143))
View(S)
u = mean(setosa.Sepal.Length)
u = mean(setosa$Sepal.Length)
u = c(mean(setosa$Sepal.Length), mean(setosa$Sepal.Width))
?normal
??normal
??normal
??normal multi
??"normal multi"
??"normal multivariate"
??"multivariate normal"
dmvnorm(x,mean,sigma)
dmvnorm(x, u, S)
library(mvtnorm)
install.packages("mvtnorm")
mean(setosa)
iris
dim(iris)
names(iris)
plot(iris[,3], iris[,4])
plot(iris$Petal.Length, iris$Petal.Width, pch=21,
bg=c("red","green3","blue")[unclass(iris$Species)])
setosa <- iris[iris$Species == "setosa", 1:4]
plot(setosa)
mean(setosa)
cov(setosa)#'S' covariancia
cor(setosa)
#Sepal Length e Sepal Width são os grupos mais correlacionados
#dist do subvetor (X1,X2)
S = matrix(nrow=2,ncol=2,c(0.124,.0992,.0992,.143))
u = c(mean(setosa$Sepal.Length), mean(setosa$Sepal.Width))
library(mvtnorm)
dmvnorm(x, u, S)
mean(setosa)
setosa.mean = c(mean(setosa$Sepal.Length),mean(setosa$Sepal.Width),mean(setosa$Petal.Length),mean(setosa$Petal.Width))
setwd("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph")
timeLogBin <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/sparse/1/timeLogBin.csv", quote="\"", comment.char="")
View(timeLogBin)
timeLogFib <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/sparse/1/timeLogFib.csv", quote="\"", comment.char="")
View(timeLogFib)
timeLogVec <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/sparse/1/timeLogVec.csv", quote="\"", comment.char="")
View(timeLogVec)
plot(x, timeLogBin)
x = c(100,1100,2100,3100,4100)
plot(x, timeLogBin)
View(timeLogBin)
y = as.numeric(timeLogBin)
y = as.array(timeLogBin)
y = (timeLogBin)
y = (timeLogBin).__C__array
y = (timeLogBin$V1)
plot(x, timeLogBin)
plot(x, y)
yBin = (timeLogBin$V1)
plot(x, y)
yBin = (timeLogBin$V1)
plot(x, yBin)
yFib = (timeLogFib$V1)
plot(x, yFib)
yVec = (timeLogVec$V1)
plot(x, yVec)
yBin = (timeLogBin$V1)
plot(x, yBin, t='lines')
yFib = (timeLogFib$V1)
lines(x, yFib)
yVec = (timeLogVec$V1)
lines(x, yVec)
lines(x, yFib, colors(T))
yBin = (timeLogBin$V1)
plot(x, yBin, t='lines')
yFib = (timeLogFib$V1)
lines(x, yFib, colors(T))
yVec = (timeLogVec$V1)
lines(x, yVec)
??plot
?plot
yBin = (timeLogBin$V1)
plot(x, yBin, t='lines', col='red')
yFib = (timeLogFib$V1)
lines(x, yFib, col='blue')
yVec = (timeLogVec$V1)
lines(x, yVec,col='green')
timeLogBin2 <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/sparse/2/timeLogBin.csv", quote="\"", comment.char="")
View(timeLogBin2)
yBin2 = timeLogBin2$V1
yBin1 = read.csv("sparse/1/timeLogBin.csv")$V1
yBin1 = read.csv("sparse/2/timeLogBin.csv")$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv")$V1
yBin1 = read.csv("sparse/1/timeLogBin.csv")$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv")$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv")$V1
?read.csv
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='lines', col='red')
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue')
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green')
?plot
plot(x, yBin, t='lines', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green')
?lines
legend("topright", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=terrain.colors(3), horiz=TRUE)
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=terrain.colors(3), horiz=TRUE)
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='lines', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin1 = read.csv("dense/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("dense/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("dense/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='lines', col='red', main="comparison on dense graph", ylab="time(s)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin1 = read.csv("sparse/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("sparse/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("sparse/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
?plot
?lines
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='lines', col='red', main="comparison on sparse graph", ylab="time(s)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
yBin1 = read.csv("dense/1/timeLogBin.csv", sep=" ", header=F)$V1
yBin2 = read.csv("dense/2/timeLogBin.csv", sep=" ", header=F)$V1
yBin3 = read.csv("dense/3/timeLogBin.csv", sep=" ", header=F)$V1
yFib1 = read.csv("sparse/1/timeLogFib.csv", sep=" ", header=F)$V1
yFib2 = read.csv("sparse/2/timeLogFib.csv", sep=" ", header=F)$V1
yFib3 = read.csv("sparse/3/timeLogFib.csv", sep=" ", header=F)$V1
yVec1 = read.csv("sparse/1/timeLogVec.csv", sep=" ", header=F)$V1
yVec2 = read.csv("sparse/2/timeLogVec.csv", sep=" ", header=F)$V1
yVec3 = read.csv("sparse/3/timeLogVec.csv", sep=" ", header=F)$V1
yBin = (yBin1 + yBin2 + yBin3)/3
plot(x, yBin, t='lines', col='red', main="comparison on dense graph", ylab="time(s)",xlab="|V|")
yFib = (yFib1 + yFib2 + yFib3)/3
lines(x, yFib, col='blue')
yVec = (yVec1 + yVec2 + yVec3)/3
lines(x, yVec,col='green')
legend("topleft", inset=.05, title="Data Structures",
c("Bin","Fib","Vec"), fill=c("red", "blue", "green"), horiz=TRUE)
timeLogBin <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/timeLogBin.csv", quote="\"", comment.char="")
View(timeLogBin)
timeLogFib <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/timeLogFib.csv", quote="\"", comment.char="")
View(timeLogFib)
timeLogVec <- read.table("~/Docs/Development/Codes/C_Cpp/Cpp/Grafos/dccGraph/dccGraph/timeLogVec.csv", quote="\"", comment.char="")
View(timeLogVec)
x = c(100,1100,2100,3100,4100)
plot(x, timeLogBin$V1)
plot(x, timeLogBin$V1)
x = c(100,1100,2100
plot(x, timeLogBin$V1)
x = c(100,1100,2100)
plot(x, timeLogBin$V1)
lines(x, timeLogVec$V1)
points(x, timeLogVec)
dots(x, timeLogVec)
lines(x, timeLogVec)
plot(x, timeLogBin$V1)
lines(x, timeLogVec)
lines(x, timeLogFib$V1)
